// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetBoard.Model.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace NetBoard.Model.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200828123215_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("netboard")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("normalized_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("net_roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasName("ix_role_claims_role_id");

                    b.ToTable("net_roleclaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasName("ix_user_claims_user_id");

                    b.ToTable("net_userclaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasName("ix_user_logins_user_id");

                    b.ToTable("net_userlogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasName("ix_user_roles_role_id");

                    b.ToTable("net_userroles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("net_usertokens");
                });

            modelBuilder.Entity("NetBoard.Model.Data.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("lockout_enabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("lockout_end")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("normalized_user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("net_users");
                });

            modelBuilder.Entity("NetBoard.Model.Data.Diy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("archived")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("Image")
                        .HasColumnName("image")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastPostDate")
                        .HasColumnName("last_post_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("name")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32)
                        .HasDefaultValue("Anonymous");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<bool?>("PastLimits")
                        .HasColumnName("past_limits")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnName("posted_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PosterIP")
                        .HasColumnName("poster_ip")
                        .HasColumnType("text");

                    b.Property<int>("PosterLevel")
                        .HasColumnName("poster_level")
                        .HasColumnType("integer");

                    b.Property<bool?>("SpoilerImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("spoiler_image")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Sticky")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sticky")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("Thread")
                        .HasColumnName("thread")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_diy_posts");

                    b.ToTable("net_diy_posts");
                });

            modelBuilder.Entity("NetBoard.Model.Data.G", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("archived")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("Image")
                        .HasColumnName("image")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastPostDate")
                        .HasColumnName("last_post_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("name")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32)
                        .HasDefaultValue("Anonymous");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<bool?>("PastLimits")
                        .HasColumnName("past_limits")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnName("posted_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PosterIP")
                        .HasColumnName("poster_ip")
                        .HasColumnType("text");

                    b.Property<int>("PosterLevel")
                        .HasColumnName("poster_level")
                        .HasColumnType("integer");

                    b.Property<bool?>("SpoilerImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("spoiler_image")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Sticky")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sticky")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("Thread")
                        .HasColumnName("thread")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_g_posts");

                    b.ToTable("net_g_posts");
                });

            modelBuilder.Entity("NetBoard.Model.Data.ImageQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AssignedPost")
                        .HasColumnName("assigned_post")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiresOn")
                        .HasColumnName("expires_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Filename")
                        .HasColumnName("filename")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnName("token")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_image_queue");

                    b.ToTable("net_image_queue");
                });

            modelBuilder.Entity("NetBoard.Model.Data.MarkedForDeletion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Board")
                        .HasColumnName("board")
                        .HasColumnType("text");

                    b.Property<int>("PostId")
                        .HasColumnName("post_id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UtcDeletedOn")
                        .HasColumnName("utc_deleted_on")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_marked_for_deletion");

                    b.ToTable("net_marked_for_deletion");
                });

            modelBuilder.Entity("NetBoard.Model.Data.Meta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Archived")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("archived")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnName("content")
                        .HasColumnType("character varying(4000)")
                        .HasMaxLength(4000);

                    b.Property<string>("Image")
                        .HasColumnName("image")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastPostDate")
                        .HasColumnName("last_post_date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("name")
                        .HasColumnType("character varying(32)")
                        .HasMaxLength(32)
                        .HasDefaultValue("Anonymous");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<bool?>("PastLimits")
                        .HasColumnName("past_limits")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnName("posted_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PosterIP")
                        .HasColumnName("poster_ip")
                        .HasColumnType("text");

                    b.Property<int>("PosterLevel")
                        .HasColumnName("poster_level")
                        .HasColumnType("integer");

                    b.Property<bool?>("SpoilerImage")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("spoiler_image")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Sticky")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sticky")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasColumnType("character varying(64)")
                        .HasMaxLength(64);

                    b.Property<int?>("Thread")
                        .HasColumnName("thread")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_meta_posts");

                    b.ToTable("net_meta_posts");
                });

            modelBuilder.Entity("NetBoard.Model.Data.Objects.FrontpageData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("About")
                        .HasColumnName("about")
                        .HasColumnType("text");

                    b.Property<string>("BoardsJson")
                        .HasColumnName("boards_json")
                        .HasColumnType("text");

                    b.Property<string>("News")
                        .HasColumnName("news")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_frontpage_data");

                    b.ToTable("net_frontpage_data");
                });

            modelBuilder.Entity("NetBoard.Model.Data.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnName("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PostBoard")
                        .HasColumnName("post_board")
                        .HasColumnType("text");

                    b.Property<int>("PostId")
                        .HasColumnName("post_id")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnName("reason")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ReportingIP")
                        .HasColumnName("reporting_ip")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_reports");

                    b.ToTable("net_reports");
                });

            modelBuilder.Entity("NetBoard.Model.Data.Sage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Board")
                        .HasColumnName("board")
                        .HasColumnType("text");

                    b.Property<DateTime>("SagedOn")
                        .HasColumnName("saged_on")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TopicId")
                        .HasColumnName("topic_id")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("pk_sages");

                    b.ToTable("net_sages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_claims_asp_net_roles_identity_role_int_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("NetBoard.Model.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_claims_asp_net_users_application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("NetBoard.Model.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_logins_asp_net_users_application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_roles_asp_net_roles_identity_role_int_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetBoard.Model.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_roles_asp_net_users_application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("NetBoard.Model.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_tokens_asp_net_users_application_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
